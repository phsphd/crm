// PostgreSQL Schema for NextCRM conversion
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  userLanguage  String?   @default("en") // Add missing field
  avatar        String?
  is_admin      Boolean   @default(false)
  is_account_admin Boolean @default(false)
  userStatus    String    @default("ACTIVE") // ACTIVE, PENDING, INACTIVE
  lastLoginAt   DateTime?
  password      String?   // For credentials auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  
  // Business account settings (one-to-one)
  myAccount    MyAccount?
  
  // CRM specific relations
  companies    Company[]
  contacts     Contact[]
  leads        Lead[]
  opportunities Opportunity[]
  tasks        Task[]
  events       Event[]
  invoices     Invoice[]
  projects     Project[]
  documents    Document[]
  contracts    Contract[]
  campaigns    Campaign[]
  
  // Board system relations
  boards       Board[]
  assignedBoardItems BoardItem[]
  
  // Task comments relation
  taskComments TaskComment[]
  
  // Assigned relations (as manager)
  assignedAccounts Company[] @relation("AssignedAccounts")
  assignedContacts Contact[] @relation("AssignedContacts")
  assignedContracts Contract[] @relation("AssignedContracts")
  assignedLeads Lead[] @relation("AssignedLeads")
  assignedOpportunities Opportunity[] @relation("AssignedOpportunities")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

// CRM Models
model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String?
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // CRM Relations
  contacts     Contact[]
  leads        Lead[]
  opportunities Opportunity[]
  invoices     Invoice[]
  projects     Project[]
  contracts    Contract[]
  
  // Account tasks relation
  accountTasks Task[] @relation("AccountTasks")
  
  // Account documents relation  
  assigned_documents Document[] @relation("CompanyDocuments")
  
  // Assigned user relation (account manager)
  assignedToUserId String?
  assigned_to_user User? @relation(fields: [assignedToUserId], references: [id], onDelete: SetNull, name: "AssignedAccounts")
  
  // Assigned contact relation
  assignedContactId String?
  assignedContact   Contact? @relation(fields: [assignedContactId], references: [id], onDelete: SetNull, name: "ContactAssignedAccounts")
  
  // Assigned account contracts relation
  assignedAccountContracts Contract[] @relation("AssignedAccountContracts")
  
  // Assigned leads relation
  assignedLeads Lead[] @relation("LeadAssignedAccounts")
  
  // ADD THIS LINE FOR ASSIGNED OPPORTUNITIES:
  assignedAccountOpportunities Opportunity[] @relation("AssignedAccountOpportunities")
  
  @@map("crm_Accounts")
}
model MyAccount {
  id                    String   @id @default(cuid())
  company_name          String
  is_person             Boolean  @default(false)
  email                 String
  email_accountant      String
  
  // Phone fields
  phone_prefix          String?
  phone                 String?
  mobile_prefix         String?
  mobile                String?
  fax_prefix            String?
  fax                   String?
  
  // Website
  website               String?
  
  // Office Address
  street                String?
  city                  String?
  state                 String?
  zip                   String?
  country               String?
  country_code          String?
  
  // Billing Address
  billing_street        String
  billing_city          String
  billing_state         String?
  billing_zip           String
  billing_country       String
  billing_country_code  String
  
  // Financial Information
  currency              String
  currency_symbol       String
  VAT_number            String
  TAX_number            String?
  
  // Bank Information
  bank_name             String
  bank_account          String
  bank_code             String
  bank_IBAN             String?
  bank_SWIFT            String?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // User relation (assuming one account per user)
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("my_accounts")
}
model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  position    String?
  department  String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  leads        Lead[]
  opportunities Opportunity[]
  tasks        Task[]
  events       Event[]
  contracts    Contract[]
  
  // Additional CRM relations
  assigned_opportunities Opportunity[] @relation("ContactAssignedOpportunities")
  assigned_documents     Document[]    @relation("ContactAssignedDocuments")
  assigned_accounts      Company[]     @relation("ContactAssignedAccounts")
  
  // Assigned user relation (contact manager)
  assignedToUserId String?
  assigned_to_user User? @relation(fields: [assignedToUserId], references: [id], onDelete: SetNull, name: "AssignedContacts")
  
  @@map("crm_Contacts") // Map to CRM contacts table
}

model Lead {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("NEW") // NEW, CONTACTED, QUALIFIED, CONVERTED, LOST
  source      String?
  value       Float?
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  // Assigned user relation
  assignedToUserId String?
  assigned_to_user User? @relation(fields: [assignedToUserId], references: [id], onDelete: SetNull, name: "AssignedLeads")
  
  // Additional CRM relations 
  assigned_accounts    Company[]  @relation("LeadAssignedAccounts")
  assigned_documents   Document[] @relation("LeadAssignedDocuments")  // THIS LINE IS REQUIRED
  
  tasks       Task[]
  events      Event[]
  
  @@map("crm_Leads")
}

 

model Opportunity {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Float?
  stage       String   @default("PROSPECTING") // PROSPECTING, QUALIFICATION, PROPOSAL, NEGOTIATION, CLOSED_WON, CLOSED_LOST
  probability Int?     @default(50)
  closeDate   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  // Assigned contact relation
  assignedContactId String?
  assignedContact   Contact? @relation(fields: [assignedContactId], references: [id], onDelete: SetNull, name: "ContactAssignedOpportunities")
  
  // Assigned account relation
  assignedAccountId String?
  assigned_account  Company? @relation(fields: [assignedAccountId], references: [id], onDelete: SetNull, name: "AssignedAccountOpportunities")
  
  // Assigned user relation (opportunity manager)
  assignedToUserId String?
  assigned_to_user User? @relation(fields: [assignedToUserId], references: [id], onDelete: SetNull, name: "AssignedOpportunities")
  
  // Sales stage relation
  salesStageId String?
  assigned_sales_stage SalesStage? @relation(fields: [salesStageId], references: [id], onDelete: SetNull, name: "OpportunitySalesStages")
  
  tasks       Task[]
  events      Event[]
  
  @@map("crm_Opportunities") // Map to CRM opportunities table
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contactId     String?
  contact       Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  leadId        String?
  lead          Lead? @relation(fields: [leadId], references: [id], onDelete: SetNull)
  
  opportunityId String?
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  // Board system relations
  sectionId     String?
  section       Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  
  boardItems    BoardItem[]
  
  // CRM specific relations
  documents     TaskDocument[]
  comments      TaskComment[]
  
  // Account relation for CRM tasks
  accountId     String?
  account       Company? @relation(fields: [accountId], references: [id], onDelete: SetNull, name: "AccountTasks")
  
  // CRM Accounts Tasks mapping
  @@map("crm_Accounts_Tasks")
}

// Task Documents relation
model TaskDocument {
  id                  String   @id @default(cuid())
  document_name       String
  document_file_url   String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  taskId              String
  task                Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

// Task Comments
model TaskComment {
  id          String   @id @default(cuid())
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  userId      String
  assigned_user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Contracts
model Contract {
  id                    String   @id @default(cuid())
  v                     Int      @default(0) // Version
  title                 String
  description           String?
  value                 Float?   // Contract value
  status                String   @default("DRAFT") // DRAFT, ACTIVE, EXPIRED, CANCELLED
  startDate             DateTime?
  endDate               DateTime?
  renewalReminderDate   DateTime?
  customerSignedDate    DateTime?
  companySignedDate     DateTime?
  account               String?  // Account reference
  assigned_to           String?  // Assigned user ID (foreign key)
  createdBy             String   // Creator user ID
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Assigned user relation
  assigned_to_user User? @relation(fields: [assigned_to], references: [id], onDelete: SetNull, name: "AssignedContracts")
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Assigned account relation
  assignedAccountId String?
  assigned_account  Company? @relation(fields: [assignedAccountId], references: [id], onDelete: SetNull, name: "AssignedAccountContracts")
  
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  @@map("crm_Contracts")
}

// Campaigns
model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE, COMPLETED
  type        String?  // EMAIL, SMS, SOCIAL, etc.
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  target      String?  // Target audience
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("crm_campaigns")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  type        String   @default("MEETING") // MEETING, CALL, EMAIL, OTHER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contactId     String?
  contact       Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  leadId        String?
  lead          Lead? @relation(fields: [leadId], references: [id], onDelete: SetNull)
  
  opportunityId String?
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
}

model Invoice {
  id          String   @id @default(cuid())
  number      String   @unique
  title       String?
  description String?
  amount      Float
  tax         Float?   @default(0)
  discount    Float?   @default(0)
  total       Float
  status      String   @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  issueDate   DateTime @default(now())
  dueDate     DateTime?
  paidDate    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  invoiceItems InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Int      @default(1)
  unitPrice   Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, COMPLETED, ON_HOLD, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  tasks       Task[]
  boards      Board[]
}

model Document {
  id          String   @id @default(cuid())
  name        String
  description String?
  fileUrl     String
  fileSize    Int?
  fileType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Company documents relation
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull, name: "CompanyDocuments")
  
  // Assigned contact relation
  assignedContactId String?
  assignedContact   Contact? @relation(fields: [assignedContactId], references: [id], onDelete: SetNull, name: "ContactAssignedDocuments")
  
  // ADD THESE LINES FOR LEAD RELATION:
  assignedLeadId String?
  assignedLead   Lead? @relation(fields: [assignedLeadId], references: [id], onDelete: SetNull, name: "LeadAssignedDocuments")
}

// System Services/Settings for storing configuration
model SystemService {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "resend_smtp", "openai", etc.
  value       String?  // The API key or configuration value
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// GPT Models configuration
model GptModel {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "gpt-4", "gpt-3.5-turbo"
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE
  description String?
  maxTokens   Int?     @default(4096)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gpt_models") // Maps to gpt_models table name
}

// Project Board System
model Board {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  sections    Section[]
}

model Section {
  id          String   @id @default(cuid())
  name        String   // e.g., "To Do", "In Progress", "Done"
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  boardId     String
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  boardItems  BoardItem[]
  
  // Direct relation to tasks (if needed)
  tasks       Task[]

  @@map("sections") // Maps to sections table name
}

model BoardItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  position    Int      @default(0)
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  sectionId   String
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  assigneeId  String?
  assignee    User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)
}

// Opportunity Types lookup table
model OpportunityType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("crm_Opportunities_Type")
}

// Sales Stages lookup table
model SalesStage {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  position    Int      @default(0) // For ordering stages
  probability Int?     @default(50) // Default probability for this stage
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // ADD THIS LINE FOR OPPORTUNITY RELATION:
  opportunities Opportunity[] @relation("OpportunitySalesStages")
  
  @@map("crm_Opportunities_Sales_Stages")
}

// Industry Types lookup table
model IndustryType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("crm_Industry_Type")
}