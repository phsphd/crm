// PostgreSQL Schema for NextCRM conversion
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  
  // CRM specific relations
  companies    Company[]
  contacts     Contact[]
  leads        Lead[]
  opportunities Opportunity[]
  tasks        Task[]
  events       Event[]
  invoices     Invoice[]
  projects     Project[]
  documents    Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

// CRM Models
model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String?
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contacts     Contact[]
  leads        Lead[]
  opportunities Opportunity[]
  invoices     Invoice[]
  projects     Project[]
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  position    String?
  department  String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  leads        Lead[]
  opportunities Opportunity[]
  tasks        Task[]
  events       Event[]
}

model Lead {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("NEW") // NEW, CONTACTED, QUALIFIED, CONVERTED, LOST
  source      String?
  value       Float?
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  tasks       Task[]
  events      Event[]
}

model Opportunity {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Float?
  stage       String   @default("PROSPECTING") // PROSPECTING, QUALIFICATION, PROPOSAL, NEGOTIATION, CLOSED_WON, CLOSED_LOST
  probability Int?     @default(50)
  closeDate   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  tasks       Task[]
  events      Event[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contactId     String?
  contact       Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  leadId        String?
  lead          Lead? @relation(fields: [leadId], references: [id], onDelete: SetNull)
  
  opportunityId String?
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  type        String   @default("MEETING") // MEETING, CALL, EMAIL, OTHER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contactId     String?
  contact       Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  leadId        String?
  lead          Lead? @relation(fields: [leadId], references: [id], onDelete: SetNull)
  
  opportunityId String?
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
}

model Invoice {
  id          String   @id @default(cuid())
  number      String   @unique
  title       String?
  description String?
  amount      Float
  tax         Float?   @default(0)
  discount    Float?   @default(0)
  total       Float
  status      String   @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  issueDate   DateTime @default(now())
  dueDate     DateTime?
  paidDate    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  invoiceItems InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Int      @default(1)
  unitPrice   Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, COMPLETED, ON_HOLD, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  tasks       Task[]
}

model Document {
  id          String   @id @default(cuid())
  name        String
  description String?
  fileUrl     String
  fileSize    Int?
  fileType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// System Services/Settings for storing configuration
model SystemService {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "resend_smtp", "openai", etc.
  value       String?  // The API key or configuration value
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// GPT Models configuration
model GptModel {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "gpt-4", "gpt-3.5-turbo"
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE
  description String?
  maxTokens   Int?     @default(4096)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("GptModel") // Maps to GptModel table name
}